<!-- 
  Example launch file for octomap_server mapping: 
  Listens to incoming PointCloud2 data and incrementally builds an octomap. 
  The data is sent out in different representations. 

  Copy this file into your workspace and adjust as needed, see
  www.ros.org/wiki/octomap_server for details  
-->
<launch>
    <node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
        <param name="resolution" value="1" />
        <!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
        <param name="frame_id" type="string" value="/map" />
        <!-- maximum range to integrate (speedup!) -->
        <param name="sensor_model/max_range" value="900.0" />
        <param name="sensor_model/min" value="0.01" />
        <param name="sensor_model/max" value="0.99" />
        <param name="sensor_model/hit" value="0.9" />
        <param name="sensor_model/miss" value="0.45" />
        <param name="color/r" value="0.1" />
        <param name="color/g" value="0.1" />
        <param name="color/b" value="0.1" />
        <param name="color/a" value="1.0" />
        <!-- Filter out obstacles which are lower than 1 meter -->
        <param name="occupancy_min_z" value="1.0" />
        <param name="height_map" value="true" />
        <param name="publish_free_space" value="true" />
        <!-- data source to integrate (PointCloud2) -->
        <!-- <remap from="cloud_in" to="$(arg point_cloud_topic)" /> -->
    </node>
</launch>

